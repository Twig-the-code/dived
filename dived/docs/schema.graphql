type City @model {
    id: ID!
    nameFi: String!
    nameSe: String!
    number: Int!
    schools: [School]! @connection(name: "Schools")
}

type School
@key(fields: ["slug"])
@model {
    slug: String!
    city: City! @connection(name: "Schools")
    name: String!
    language: Int!
}

input CreateGroupInput {
    id: String!
    schoolId: ID!
}

type Group
@key(fields: ["pk", "sk"])
@model
@auth(
    rules: [
        {ownerField: "pk", allow: owner}
    ]
){
    pk: String!
    sk: String!
}

type GroupDetails {
    id: String!
    school: School!
    progress: [CardProgress]!
}

input FinishedCardInput {
    cardId: Int!
}
type Mutation {
    addFinishedCard(input: FinishedCardInput!): CardProgress
    removeFinishedCard(input: FinishedCardInput!): CardProgress
}

type CardProgress {
    cardId: Int!
}

type ProgressConnection {
    items: [CardProgress]
    nextToken: String
}

type Query {
    listProgress(groupId: String!, limit: Int, nextToken: String): ProgressConnection
}
