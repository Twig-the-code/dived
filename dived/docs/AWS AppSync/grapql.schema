input CreateDivEDProgressInput {
  data: String!
  pk: String!
  sk: String!
  json: AWSJSON
}

input CreateGroupInput {
  pk: String!
  data: String!
  json: AWSJSON
}

type DivEDGroup {
  id: String!
  createdAt: String!
}

input DeleteDivEDProgressInput {
  pk: String!
  sk: String!
}

type DivEDProgress {
  data: String!
  pk: String!
  sk: String!
  json: AWSJSON
}

type DivEDProgressConnection {
  items: [DivEDProgress]
  nextToken: String
}

type Mutation {
  createGroup(input:CreateGroupInput): DivEDGroup
  createDivEDProgress(input: CreateDivEDProgressInput!): DivEDProgress
  updateDivEDProgress(input: UpdateDivEDProgressInput!): DivEDProgress
  deleteDivEDProgress(input: DeleteDivEDProgressInput!): DivEDProgress
}

type Query {
  getDivEDProgress(pk: String!, sk: String!): DivEDProgress
  listDivEDProgresses(filter: TableDivEDProgressFilterInput, limit: Int, nextToken: String): DivEDProgressConnection
  queryDivEDProgressesBySkDataIndex(sk: String!, first: Int, after: String): DivEDProgressConnection
}

type Subscription {
  onCreateDivEDProgress(
  data: String,
  pk: String,
  sk: String,
  json: AWSJSON
  ): DivEDProgress
  @aws_subscribe(mutations: ["createDivEDProgress"])
  onUpdateDivEDProgress(
  data: String,
  pk: String,
  sk: String,
  json: AWSJSON
  ): DivEDProgress
  @aws_subscribe(mutations: ["updateDivEDProgress"])
  onDeleteDivEDProgress(
  data: String,
  pk: String,
  sk: String,
  json: AWSJSON
  ): DivEDProgress
  @aws_subscribe(mutations: ["deleteDivEDProgress"])
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableDivEDProgressFilterInput {
  data: TableStringFilterInput
  pk: TableStringFilterInput
  sk: TableStringFilterInput
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input UpdateDivEDProgressInput {
  data: String
  pk: String!
  sk: String!
  json: AWSJSON
}