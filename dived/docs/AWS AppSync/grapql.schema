# CARDS
input AddFinishedCardInput {
	cardId: ID!
}

type Card {
	id: ID!
	number: Int!
	type: CardType!
}

input CardFilterInput {
	id: ModelIDFilterInput
	number: ModelIntFilterInput
	type: ModelCardTypeFilterInput
	and: [CardFilterInput]
	or: [CardFilterInput]
	not: CardFilterInput
}

type CardProgress {
	id: ID!
}

enum CardType {
	culture
	language
	multilanguage
	digi
}

input CreateCardInput {
	number: Int!
	type: CardType!
}

# PROGRESSES
input CreateDivEdProgressInput {
	pk: String!
	sk: String!
	data: String!
}

input CreateGroupInput {
	json: AWSJSON
}

type Data {
	pk: String!
	sk: String!
	data: String!
}

input DeleteDivEdProgressInput {
	pk: String!
	sk: String!
}

type DivEDGroup {
	id: String!
	createdAt: AWSDateTime!
}

type DivEdProgress {
	pk: String!
	sk: String!
	data: String!
}

type DivEdProgressConnection {
	items: [DivEdProgress]
	nextToken: String
}

type GroupProgressConnection {
	items: [CardProgress]
	nextToken: String
}

type ListOfCards {
	items: [Card]
	nextToken: String
}

input ModelCardTypeFilterInput {
	eq: CardType
	ne: CardType
}

# FILTER CARDS!
input ModelIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input ModelIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input ModelStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

type Mutation {
	createCard(input: CreateCardInput!): Card
	addFinishedCard(input: AddFinishedCardInput!): DivEDGroup
	createGroup(input: CreateGroupInput): DivEDGroup
}

type Query {
	listCards(filter: CardFilterInput, limit: Int, nextToken: String): ListOfCards
	listGroupProgress(groupId: String!, limit: Int, nextToken: String): GroupProgressConnection
}

type Subscription {
	onCreateGroup(pk: String, sk: String, data: String): DivEDGroup
		@aws_subscribe(mutations: ["createGroup"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableDivEdProgressFilterInput {
	pk: TableStringFilterInput
	sk: TableStringFilterInput
	data: TableStringFilterInput
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateDivEdProgressInput {
	pk: String!
	sk: String!
	data: String
}